/**
 * Feedback APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { InternalServerError } from '../errors/internalServerError';
import { TooManyRequestsError } from '../errors/tooManyRequestsError';
import { UnauthorizedError } from '../errors/unauthorizedError';
import { Credentials, credentialsSchema } from '../models/credentials';
import { string } from '../schema';
import { BaseController } from './baseController';

export class CredentialsController extends BaseController {
  /**
   * ### Start here by creating your credentials
   * Be careful to save the private key that is returned. You will not be able to retrieve it again.
   * You can only have one private key at a time.
   * Private key is not to be shared with anyone, do not expose it in your frontend code.
   *
   *
   * @return Response from the API call
   */
  async createCredentials(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Credentials>> {
    const req = this.createRequest('POST', '/credentials');
    req.throwOn(401, UnauthorizedError, 'Unauthorized');
    req.throwOn(429, TooManyRequestsError, 'Too Many Requests');
    req.throwOn(500, InternalServerError, 'Internal Server Error');
    return req.callAsJson(credentialsSchema, requestOptions);
  }

  /**
   * ### Rotate credentials
   * Generate a new private key and invalidate the current one.
   * Use this in case your private key is compromised or for security reasons.
   *
   *
   * @param xAPIKEY   Private key. Create a tenant to generate.
   * @return Response from the API call
   */
  async rotateCredentials(
    xAPIKEY: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Credentials>> {
    const req = this.createRequest('PUT', '/credentials');
    const mapped = req.prepareArgs({ xAPIKEY: [xAPIKEY, string()] });
    req.header('X-API-KEY', mapped.xAPIKEY);
    req.throwOn(401, UnauthorizedError, 'Unauthorized');
    req.throwOn(429, TooManyRequestsError, 'Too Many Requests');
    req.throwOn(500, InternalServerError, 'Internal Server Error');
    return req.callAsJson(credentialsSchema, requestOptions);
  }

  /**
   * ### Delete credentials
   * Invalidate your current private key.
   * You will no longer be able to create or read feedback.
   *
   *
   * @param xAPIKEY   Private key. Create a tenant to generate.
   * @return Response from the API call
   */
  async deleteCredentials(
    xAPIKEY: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/credentials');
    const mapped = req.prepareArgs({ xAPIKEY: [xAPIKEY, string()] });
    req.header('X-API-KEY', mapped.xAPIKEY);
    req.throwOn(401, UnauthorizedError, 'Unauthorized');
    req.throwOn(429, TooManyRequestsError, 'Too Many Requests');
    req.throwOn(500, InternalServerError, 'Internal Server Error');
    return req.call(requestOptions);
  }
}
