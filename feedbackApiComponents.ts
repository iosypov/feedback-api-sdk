/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import type * as Fetcher from './feedbackApiFetcher';
import { feedbackApiFetch } from './feedbackApiFetcher';
import type * as Schemas from './feedbackApiSchemas';
import type * as Responses from './feedbackApiResponses';

export type GetFeedbackPathParams = {
  /**
   * Resource identifier string.
   *
   * @pattern ^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$
   * @example c73bcdcc-2669-4bf6-81d3-e4ae73fb11fd
   */
  id: string;
};

export type GetFeedbackError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 401;
      payload: Responses.Unauthorized;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 429;
      payload: Responses.TooManyRequests;
    }
  | {
      status: 500;
      payload: Responses.InternalServerError;
    }
>;

export type GetFeedbackVariables = {
  pathParams: GetFeedbackPathParams;
};

export const getFeedback = (variables: GetFeedbackVariables, signal?: AbortSignal) =>
  feedbackApiFetch<Schemas.Feedback, GetFeedbackError, undefined, {}, {}, GetFeedbackPathParams>({
    url: '/feedback/{id}',
    method: 'get',
    ...variables,
    signal,
  });

export type UpdateFeedbackPathParams = {
  /**
   * Resource identifier string.
   *
   * @pattern ^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$
   * @example c73bcdcc-2669-4bf6-81d3-e4ae73fb11fd
   */
  id: string;
};

export type UpdateFeedbackError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 401;
      payload: Responses.Unauthorized;
    }
  | {
      status: 404;
      payload: Responses.NotFound;
    }
  | {
      status: 429;
      payload: Responses.TooManyRequests;
    }
  | {
      status: 500;
      payload: Responses.InternalServerError;
    }
>;

export type UpdateFeedbackVariables = {
  body?: Schemas.Feedback;
  pathParams: UpdateFeedbackPathParams;
};

export const updateFeedback = (variables: UpdateFeedbackVariables, signal?: AbortSignal) =>
  feedbackApiFetch<
    Schemas.Feedback,
    UpdateFeedbackError,
    Schemas.Feedback,
    {},
    {},
    UpdateFeedbackPathParams
  >({ url: '/feedback/{id}', method: 'put', ...variables, signal });

export type GetFeedbacksQueryParams = {
  /**
   * Rating to filter by.
   */
  rating?: number[];
  /**
   * Sentiment to filter by.
   */
  sentiment?: (true | false)[];
  /**
   * Reasons to filter by.
   */
  reasons?: string[];
  /**
   * User ID to filter by.
   */
  userId?: string[];
  /**
   * IP address to filter by.
   */
  userIP?: string[];
  /**
   * Page to filter by.
   */
  page?: string[];
  /**
   * Category to filter by.
   */
  category?: string[];
  /**
   * Operation to filter by.
   */
  apiOperationId?: string[];
};

export type GetFeedbacksHeaders = {
  /**
   * Page number.
   *
   * @default 1
   * @example 1
   */
  ['X-PAGE']?: number;
  /**
   * Items per page.
   *
   * @default 50
   * @example 10
   */
  ['X-PER-PAGE']?: number;
  /**
   * Sort order.
   *
   * @default desc
   */
  ['X-ORDER']?: 'asc' | 'desc';
  /**
   * Order by.
   *
   * @default createdAt
   */
  ['X-ORDER-BY']?: 'rating' | 'createdAt';
};

export type GetFeedbacksError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Responses.Unauthorized;
    }
  | {
      status: 429;
      payload: Responses.TooManyRequests;
    }
  | {
      status: 500;
      payload: Responses.InternalServerError;
    }
>;

export type GetFeedbacksResponse = {
  data?: Schemas.Feedback[];
  pagination?: Schemas.Pagination;
};

export type GetFeedbacksVariables = {
  headers?: GetFeedbacksHeaders;
  queryParams?: GetFeedbacksQueryParams;
};

export const getFeedbacks = (variables: GetFeedbacksVariables, signal?: AbortSignal) =>
  feedbackApiFetch<
    GetFeedbacksResponse,
    GetFeedbacksError,
    undefined,
    GetFeedbacksHeaders,
    GetFeedbacksQueryParams,
    {}
  >({ url: '/feedback', method: 'get', ...variables, signal });

export type CreateFeedbackError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Responses.BadRequest;
    }
  | {
      status: 401;
      payload: Responses.Unauthorized;
    }
  | {
      status: 429;
      payload: Responses.TooManyRequests;
    }
  | {
      status: 500;
      payload: Responses.InternalServerError;
    }
>;

export type CreateFeedbackVariables = {
  body?: Schemas.Feedback;
};

export const createFeedback = (variables: CreateFeedbackVariables, signal?: AbortSignal) =>
  feedbackApiFetch<Schemas.Feedback, CreateFeedbackError, Schemas.Feedback, {}, {}, {}>({
    url: '/feedback',
    method: 'post',
    ...variables,
    signal,
  });

export type HealthError = Fetcher.ErrorWrapper<
  | {
      status: 429;
      payload: Responses.TooManyRequests;
    }
  | {
      status: 500;
      payload: Responses.InternalServerError;
    }
>;

export const health = (signal?: AbortSignal) =>
  feedbackApiFetch<Responses.NoContent, HealthError, undefined, {}, {}, {}>({
    url: '/health',
    method: 'get',
    signal,
  });

export const operationsByTag = {
  private: { getFeedback, getFeedbacks, health },
  public: { updateFeedback, createFeedback },
};
